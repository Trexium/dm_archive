@page "/Account/ForgotPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using DungeonMastersArchive.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

@* <PageTitle>Forgot your password?</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Forgot your password?</MudText>

<MudText Typo="Typo.body1" GutterBottom="true">Enter your email.</MudText>

<EditForm Model="Input" FormName="forgot-password" OnValidSubmit="OnValidSubmitAsync" method="post">
    <DataAnnotationsValidator />

    <MudGrid>
        <MudItem md="12">
            <MudStaticTextField For="@(() => Input.Email)" @bind-Value="Input.Email"
                                Label="Email" Placeholder="name@example.com"
                                UserAttributes="@(new() { { "autocomplete", "username" }, { "aria-required", "true" } } )" />
        </MudItem>
        <MudItem md="12">
            <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">Reset password</MudStaticButton>
        </MudItem>
    </MudGrid>
</EditForm> *@
<PageTitle>Glömt ditt lösenord?</PageTitle>
<MudStack>
    <MudPaper Class="flex-grow-1 pa-6 ma-2" Elevation="3">
        <MudText Typo="Typo.h2" GutterBottom="true">Glömt ditt lösenord?</MudText>
        <MudText GutterBottom="true" Typo="Typo.body1">Kontakta din spelledare och be dem återställa ditt lösenord.</MudText>
    </MudPaper>
</MudStack>

@code {
    // [SupplyParameterFromForm]
    // private InputModel Input { get; set; } = new();

    // private async Task OnValidSubmitAsync()
    // {
    //     var user = await UserManager.FindByEmailAsync(Input.Email);
    //     if (user is null || !(await UserManager.IsEmailConfirmedAsync(user)))
    //     {
    //         // Don't reveal that the user does not exist or is not confirmed
    //         RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
    //     }

    //     // For more information on how to enable account confirmation and password reset please
    //     // visit https://go.microsoft.com/fwlink/?LinkID=532713
    //     var code = await UserManager.GeneratePasswordResetTokenAsync(user);
    //     code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
    //     var callbackUrl = NavigationManager.GetUriWithQueryParameters(
    //         NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri,
    //         new Dictionary<string, object?> { ["code"] = code });

    //     await EmailSender.SendPasswordResetLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

    //     RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
    // }

    // private sealed class InputModel
    // {
    //     [Required]
    //     [EmailAddress]
    //     public string Email { get; set; } = "";
    // }
}
