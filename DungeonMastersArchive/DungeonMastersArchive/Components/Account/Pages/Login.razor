@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using DungeonMastersArchive.Services
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using DungeonMastersArchive.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IUserService UserService

<PageTitle>Logga in</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Logga in</MudText>
<MudStack>
    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
        <MudStack Row="true">
            <MudPaper Class="flex-grow-1 pa-6 ma-2" Elevation="3">

                <StatusMessage Message="@errorMessage" />
                <DataAnnotationsValidator />
                <MudText GutterBottom="true" Typo="Typo.body1">Använd ditt SLArmour-konto för att logga in.</MudText>

                <MudGrid>
                    <MudItem md="12">
                        <MudStaticTextField For="@(() => Input.Email)" @bind-Value="Input.Email"
                        Label="E-post" Placeholder="name@slarmour.se"
                        UserAttributes="@(new() { { "autocomplete", "true" }, { "aria-required", "true" } } )" />
                    </MudItem>
                    <MudItem md="12">
                        <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                        Label="Lösenord" InputType="InputType.Password" Placeholder="password"
                        UserAttributes="@(new() { { "autocomplete", "current-password" }, { "aria-required", "true" } } )" />
                    </MudItem>
                    <MudItem md="12">
                        <MudStaticCheckBox For="@(() => Input.RememberMe)" @bind-Value="Input.RememberMe">Kom ihåg mig</MudStaticCheckBox>
                    </MudItem>
                    <MudItem md="12">

                    </MudItem>
                </MudGrid>

            </MudPaper>
            <MudPaper Class=" pa-6 ma-2" Elevation="3">
                <MudButtonGroup Vertical="true">
                    <MudButton Href="Account/ForgotPassword" StartIcon="@Icons.Material.Filled.Password">Glömt ditt lösenord?</MudButton>
                    <MudButton Href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" StartIcon="@Icons.Material.Filled.PersonAdd">Registera konto</MudButton>
                    <MudButton ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.Login">Logga in</MudButton>
                </MudButtonGroup>
            </MudPaper>
        </MudStack>
    </EditForm>
</MudStack>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Kom ihåg mig?")]
        public bool RememberMe { get; set; }
    }
}
