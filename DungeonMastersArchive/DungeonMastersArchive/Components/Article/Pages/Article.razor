@page "/article/{id:int?}"
@using DungeonMastersArchive.Components.Article.Shared
@using DungeonMastersArchive.Models.Article
@using DungeonMastersArchive.Services
@using System.Security.Claims

@inject IArticleService ArticleService
@inject IUserService UserService
@inject IImageService ImageService

@inject AuthenticationStateProvider AuthenticationStateProvider


@if (_model == null)
{

}
else
{
    // Karaktär
    @*     @if (false && _model.ArticleTypeId == "1" || _model.ArticleTypeId == "2" || _model.ArticleTypeId == "6")
    {

    }
    else if (false && _model.ArticleTypeId == "4")
    {

    }
    else
    { *@
    <MudStack>
        <MudPaper Class="flex-grow-1 pa-6 ma-2" Elevation="3">
            <MudStack>

                <MudText Typo="Typo.h2">@(!string.IsNullOrEmpty(_model.ArticleName) ? _model.ArticleName : _model.ArticleTypeDisplayText)</MudText>

                <br />
                <MudText Typo="Typo.body1">
                    @((MarkupString)_model.ArticleText)
                </MudText>
            </MudStack>
        </MudPaper>

        @if (_model.HasImages)
        {
            <MudPaper Class="flex-grow-1 pa-6 ma-2" Elevation="3">
                <ArticleImageCaruosel ArticleId="Id" />
            </MudPaper>
        }

        @if (_model.HasLinks)
        {
            <MudPaper Class="pa-6 ma-2" Elevation="3">
                <LinksSection ArticleId="@Id" />
            </MudPaper>
        }

        @if (_model.Tags != null && _model.Tags.Any())
        {
            <MudPaper Class="pa-6 ma-2" Elevation="3">
                <MudText Typo="Typo.h6" GutterBottom="true">Taggar</MudText>
                <br />
                <MudChipSet T="string" Variant="Variant.Text" Color="Color.Info">
                    @foreach (var tag in _model.Tags)
                    {
                        <MudChip Value="@(tag.Tag)" />
                    }
                </MudChipSet>
            </MudPaper>
        }

    </MudStack>
    @* } *@

}



@code {
    [Parameter]
    public int Id { get; set; }

    private Models.Article.Article _model;

    private ClaimsPrincipal _aspUser;



    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _aspUser = authState.User;
    }

    protected override async Task OnParametersSetAsync()
    {
        _model = await ArticleService.GetArticle(Id);
    }
}
