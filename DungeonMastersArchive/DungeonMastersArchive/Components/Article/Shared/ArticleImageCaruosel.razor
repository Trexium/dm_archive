@using DungeonMastersArchive.Models.Article
@using DungeonMastersArchive.Services

@inject IUserService UserService
@inject IArticleService ArticleService
@inject IImageService ImageService



@if (_model != null && _model.Any())
{
    <MudStack>
        <MudText Typo="Typo.h6" GutterBottom="true">Bilder</MudText>
        <MudGrid Justify="Justify.FlexStart">
            @foreach (var image in _model)
            {
                <MudItem xs="2" lg="1">
                    <MudPaper Class="pa-2 d-flex flex-column align-center justify-center mud-width-full" @onclick="() => ShowImagePopup(_model.IndexOf(image))" Elevation="5">
                        <MudImage Class="d-flex align-center" Style="height:100%; width:100%;" Src="@ImageService.GetImageUrl(image)" ObjectFit="ObjectFit.ScaleDown" Alt="@image.Title" />
                    </MudPaper>
                </MudItem>
            }
        </MudGrid>
    </MudStack>

    <MudOverlay @bind-Visible="_overlayVisible" DarkBackground AutoClose="true" OnClosed="OnOverlayClosed" ZIndex="9998" Class="d-flex">
        <MudPaper Class="d-flex flex-column flex-column justify-center flex-grow-1" Style="width: 99vw;">
            <MudCarousel class="d-flex flex-wrap" Style="color: dodgerblue;font-size:50px; height:800px;" BulletsColor="Color.Primary" ItemsSource="@_model" @bind-SelectedIndex="_carouselIndex" ShowArrows="true" ShowBullets="true" EnableSwipeGesture="true" AutoCycle="false">
                <ItemTemplate>
                    <MudStack>
                        <MudImage ObjectPosition="ObjectPosition.Center" Src="@ImageService.GetImageUrl(context)" ObjectFit="ObjectFit.ScaleDown" Elevation="25" Alt="@context.Title" Height="800" />
                    </MudStack>
                </ItemTemplate>
            </MudCarousel>
        </MudPaper>
        <MudStack Row="true">
            <MudSpacer />
            <MudText Typo="Typo.h2" Class="pa-2" Align="@Align.Center">@_model[_carouselIndex].Title</MudText>
            <MudSpacer />
        </MudStack>
    </MudOverlay>



}

@code {
    [Parameter]
    public int ArticleId { get; set; }

    private Models.User.User _user;
    private List<ArticleImageMetadata> _model;

    private MudCarousel<ArticleImageMetadata>? _carousel;
    private MudCarousel<ArticleImageMetadata>? _messageBoxCarousel;
    private MudMessageBox _mudMessageBox;


    private int _carouselIndex;
    private bool _overlayVisible = false;

    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnParametersSetAsync()
    {
        _user = await UserService.GetCurrentUser();
        _model = await ArticleService.GetArticleImages(ArticleId);
    }

    public void OnOverlayClosed()
    {

    }

    public void ShowImagePopup(int index)
    {
        _carouselIndex = index;
        _overlayVisible = true;
        StateHasChanged();
    }
}
