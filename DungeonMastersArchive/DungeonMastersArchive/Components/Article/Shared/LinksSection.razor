@using DungeonMastersArchive.Models.Article
@using DungeonMastersArchive.Services
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims

@inject IArticleService ArticleService
@inject IUserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize(Policy = "Player")]

@if (_model != null && _principal.Identity.IsAuthenticated)
{
    <MudStack>
        <MudText Typo="Typo.h6" GutterBottom="true">Relaterat</MudText>
        <MudStack Row="true">
            @foreach (var linkGroup in _model.Keys)
            {
                <div>
                    <b>@linkGroup</b>
                    <ul>
                        @foreach (var link in _model[linkGroup])
                        {
                            <li><MudLink Href="@($"/article/{link.ArticleId}")">@link.ArticleName</MudLink></li>
                        }
                    </ul>
                </div>
            }
        </MudStack>

    </MudStack>
}

@code {
    [Parameter]
    public int ArticleId { get; set; }

    private List<ArticleLink> _allLinks;
    private Dictionary<string, List<ArticleLink>> _model;
    private ClaimsPrincipal _principal;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _principal = authState.User;
    }

    protected override async Task OnParametersSetAsync()
    {
        _model = await ArticleService.GetArticleLinks(ArticleId);
    }
}
