@using DungeonMastersArchive.Data
@using DungeonMastersArchive.Models
@using DungeonMastersArchive.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore
@inherits LayoutComponentBase

@inject IUserService UserService
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject IValueStoreService ValueStoreService
@* @inject RoleStore<IdentityRole> RoleStore
@inject RoleManager<IdentityRole> RoleManager *@

<MudThemeProvider IsDarkMode="true" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">SL-Armour</MudText>
        <MudSpacer />
        @if (_availableCampaigns != null && _currentUser != null)
        {

            <MudSelect Class="pa-2" AdornmentColor="Color.Primary" Label="Aktuell kampanj" T="int" @bind-Value="_currentUser.CurrentCampaignId" OnClose="ChangeCampaign">
                @foreach (var campaign in _availableCampaigns)
                {
                    <MudSelectItem Value="@campaign.Key">@campaign.Value</MudSelectItem>
                }
            </MudSelect>
        }
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent Class="mt-16 pa-4">
        @Body
    </MudMainContent>
</MudLayout>


<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool _drawerOpen = true;

    private Models.User.User _currentUser;

    private List<ValueStoreItem<int, string>> _availableCampaigns;


    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnParametersSetAsync()
    {
        _currentUser = await UserService.GetCurrentUser();

        if (_currentUser != null)
        {
            _availableCampaigns = await ValueStoreService.GetUserCampaigns(_currentUser.Id);
        }
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task ChangeCampaign()
    {
        if (await UserService.SetCurrentCampaign(_currentUser.Id, _currentUser.CurrentCampaignId))
        {
            _currentUser = await UserService.GetCurrentUser();
            var aspUser = await UserStore.FindByIdAsync(_currentUser.AspUserId, CancellationToken.None);
            var claimsToRemove = await UserManager.GetClaimsAsync(aspUser);
            await UserManager.RemoveClaimsAsync(aspUser, claimsToRemove);
            await UserManager.AddClaimAsync(aspUser, new System.Security.Claims.Claim("Campaign", _currentUser.CurrentCampaignId.ToString()));
            await UserManager.AddClaimAsync(aspUser, new System.Security.Claims.Claim("Role", _currentUser.CurrentRoleId.ToString()));
        }
        else
        {

        }
    }

}


