@using DungeonMastersArchive.Data
@using DungeonMastersArchive.Extenions
@using DungeonMastersArchive.Models
@using DungeonMastersArchive.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore
@using System.Security.Claims
@inherits LayoutComponentBase

@inject IUserService UserService
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject IValueStoreService ValueStoreService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SignInManager<ApplicationUser> SignInManager

<MudThemeProvider IsDarkMode="true" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">SL-Armour</MudText>
        <MudSpacer />
        @if (_availableCampaigns != null && _principal.Identity.IsAuthenticated)
        {

            <MudSelect Class="pa-2" AdornmentColor="Color.Primary" Label="Aktuell kampanj" T="int" Value="@_currentCampaign" ValueChanged="ChangeCampaign">
                @if (_currentCampaign == 0)
                {
                    <MudSelectItem Value="0">Välj en kampanj...</MudSelectItem>
                }

                @foreach (var campaign in _availableCampaigns)
                {
                    <MudSelectItem Value="@campaign.Key">@campaign.Value</MudSelectItem>
                }
            </MudSelect>
        }
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent Class="mt-16 pa-4">
        @Body
    </MudMainContent>
</MudLayout>


<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool _drawerOpen = true;

    private ClaimsPrincipal _principal;

    private List<ValueStoreItem<int, string>> _availableCampaigns;

    private int _currentCampaign;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _principal = authState.User;

    }

    protected override async Task OnParametersSetAsync()
    {
        if (_principal.Identity.IsAuthenticated)
        {
            _availableCampaigns = await ValueStoreService.GetUserCampaigns(_principal.GetUserId());
            _currentCampaign = _principal.GetCampaign();
        }
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task ChangeCampaign(int campaignId)
    {
        var roleId = await UserService.SetCurrentCampaign(_principal.GetUserId(), campaignId);

        var user = await UserStore.FindByIdAsync(_principal.GetAspUserId(), CancellationToken.None);
        // await SignInManager.SignOutAsync();
        // var claimsToRemove = _principal.GetFungableClaims();
        // foreach (var claim in claimsToRemove)
        // {
        //     (_principal.Identity as ClaimsIdentity).RemoveClaim(claim);
        // }
        // (_principal.Identity as ClaimsIdentity).AddClaim()


        // await UserManager.RemoveClaimsAsync(user, claimsToRemove);
        // await UserManager.AddClaimAsync(user, new System.Security.Claims.Claim("Campaign", campaignId.ToString()));
        // await UserManager.AddClaimAsync(user, new System.Security.Claims.Claim("Role", roleId.ToString()));
        // await SignInManager.PasswordSignInAsync(user.UserName, "");
        
    }

}


