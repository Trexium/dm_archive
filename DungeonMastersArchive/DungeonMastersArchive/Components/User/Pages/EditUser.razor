@page "/edit-user/{id:int?}"
@using DungeonMastersArchive.Data
@using DungeonMastersArchive.Models
@using DungeonMastersArchive.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Options
@using System.Text

@inject IUserService UserService
@inject ISnackbar Snackbar
@inject IValueStoreService ValueStoreService
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject IOptions<SystemDefaults> SystemDefaults

@if (_model == null)
{

}
else
{
    <MudForm @ref="_form">
        <MudStack Row="true">
            <MudPaper Class="flex-grow-1 pa-6 ma-2" Elevation="3">
                <MudStack Row="true">
                    <MudItem md="6"><MudTextField Required RequiredError="Ett namn måste anges." Disabled="@_model.IsDeleted" Class="pa-2" T="string" @bind-Value="_model.Name" Label="Namn" Variant="Variant.Outlined"></MudTextField></MudItem>
                    <MudItem md="6"><MudCheckBox Class="pa-2" Disabled="@_model.IsDeleted" Label="Verifierad" @bind-Value="_model.IsVerified"></MudCheckBox></MudItem>
                </MudStack>
                <MudStack Row="true">
                    <MudItem md="6"><MudTextField Required RequiredError="En e-post måste anges." Disabled="@_model.IsDeleted" Class="pa-2" T="string" @bind-Value="_model.Email" Label="E-post" Variant="Variant.Outlined" InputType="InputType.Email"></MudTextField></MudItem>
                    <MudItem md="6"><MudTextField Disabled="@_model.IsDeleted" Class="pa-2" T="string" @bind-Value="_model.Password" Label="Lösenord" Variant="Variant.Outlined" InputType="InputType.Password"></MudTextField></MudItem>
                </MudStack>
                <MudStack>
                    <MudSelect Required RequiredError="En roll måste sättas på användaren." T="int?" @bind-Value="_model.RoleId" Disabled="@_model.IsDeleted" Class="pa-2" Label="Behörighet">
                        @foreach (var role in _roles)
                        {
                            <MudSelectItem Value="@role.Key">@role.Value</MudSelectItem>
                        }
                    </MudSelect>
                </MudStack>
            </MudPaper>
            <MudPaper Class=" pa-6 ma-2" Elevation="3">
                <MudButtonGroup Vertical="true">
                    <MudButton StartIcon="@Icons.Material.Filled.Public" Disabled="@_model.IsDeleted">Nollställ lösenord</MudButton>
                    @if (_model.IsDeleted)
                    {
                        <MudButton StartIcon="@Icons.Material.Filled.Delete" OnClick="UndeleteUser">Trolla tillbaka</MudButton>
                    }
                    else
                    {
                        <MudButton StartIcon="@Icons.Material.Filled.Delete" OnClick="DeleteUser">Tabort</MudButton>
                    }
                    <MudButton OnClick="SaveClick" StartIcon="@Icons.Material.Filled.Save" Disabled="@_model.IsDeleted">Spara</MudButton>
                </MudButtonGroup>
            </MudPaper>
        </MudStack>
    </MudForm>
}



@code {
    [Parameter]
    public int? Id { get; set; }

    private Models.User.UserEdit _model;
    private Models.User.User _currentUser;
    private List<Models.ValueStoreItem<int?, string>> _roles;

    private MudForm _form;


    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnParametersSetAsync()
    {
        _currentUser = await UserService.GetCurrentUser();
        _roles = await ValueStoreService.GetRoles();
        if (Id.HasValue)
        {
            _model = await UserService.GetEditUser(Id.Value, _currentUser.CurrentCampaignId);
        }
        else
        {
            _model = new Models.User.UserEdit();
            _model.IsVerified = true;
        }
    }

    private async Task DeleteUser()
    {
        if (await UserService.DeleteUser(Id.Value))
        {
            Snackbar.Add("Användaren har tagits bort.", Severity.Info);
            _model.IsDeleted = true;
        }
        else
        {
            Snackbar.Add("Användaren gick inte att tabort.", Severity.Error);
        }
    }

    private async Task UndeleteUser()
    {
        if (await UserService.UndeleteUser(Id.Value))
        {
            Snackbar.Add("Användaren har tagits tillbaka.", Severity.Info);
            _model.IsDeleted = true;
        }
        else
        {
            Snackbar.Add("Användaren gick inte att ta tillbaka.", Severity.Error);
        }
    }

    private async Task SaveClick()
    {
        await _form.Validate();
        if (_form.IsValid)
        {
            string errorMessage = null;
            if (!_model.Id.HasValue && await CreateAspUser())
            {
                try
                {
                    _model = await UserService.SaveUser(_model, _currentUser.CurrentCampaignId);
                    Snackbar.Add($"Den nya användaren ({_model.Name}) har skapats.", Severity.Success);
                }
                catch (Exception ex)
                {
                    Snackbar.Add("Något gick fel med att skapa användaren.", Severity.Error);
                }


            }
            else if (await UpdateAspUser())
            {
                try
                {
                    _model = await UserService.SaveUser(_model, _currentUser.CurrentCampaignId);
                    Snackbar.Add($"Ändringar på användaren ({_model.Name}) har sparats.", Severity.Success);
                }
                catch (Exception ex)
                {
                    Snackbar.Add("Något gick fel med att spara användaren.", Severity.Error);
                }

            }
        }
    }

    private async Task<bool> CreateAspUser()
    {
        var aspUser = Activator.CreateInstance<ApplicationUser>();
        await UserStore.SetUserNameAsync(aspUser, _model.Email, CancellationToken.None);
        await ((IUserEmailStore<ApplicationUser>)UserStore).SetEmailAsync(aspUser, _model.Email, CancellationToken.None);
        var createAspUserResult = await UserManager.CreateAsync(aspUser, _model.Password ?? SystemDefaults.Value.UserPassword);

        if (createAspUserResult.Succeeded)
        {
            _model.AspNetUserId = aspUser.Id;

            if (_model.IsVerified)
            {
                var code = await UserManager.GenerateEmailConfirmationTokenAsync(aspUser);
                code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
                var result = await UserManager.ConfirmEmailAsync(aspUser, code);
            }

            return true;
        }
        else
        {
            await ShowIdentityErrorsInSnackbar(createAspUserResult.Errors);

            return false;
        }
    }

    private async Task<bool> UpdateAspUser()
    {
        var aspUser = await UserStore.FindByIdAsync(_model.AspNetUserId, CancellationToken.None);
        if (aspUser == null)
        {
            if (!await CreateAspUser())
            {
                return false;
            }
        }
        if (aspUser.Email != _model.Email)
        {
            await UserStore.SetUserNameAsync(aspUser, _model.Email, CancellationToken.None);
            await ((IUserEmailStore<ApplicationUser>)UserStore).SetEmailAsync(aspUser, _model.Email, CancellationToken.None);

            if (_model.IsVerified)
            {
                var code = await UserManager.GenerateEmailConfirmationTokenAsync(aspUser);
                code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
                var result = await UserManager.ConfirmEmailAsync(aspUser, code);

                if (!result.Succeeded)
                {
                    await ShowIdentityErrorsInSnackbar(result.Errors);
                    return false;
                }
            }
        }

        if (!string.IsNullOrEmpty(_model.Password))
        {
            var code = await UserManager.GeneratePasswordResetTokenAsync(aspUser);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            var result = await UserManager.ResetPasswordAsync(aspUser, code, _model.Password);

            if (!result.Succeeded)
            {
                await ShowIdentityErrorsInSnackbar(result.Errors);
                return false;
            }
        }

        return true;
    }

    private async Task ShowIdentityErrorsInSnackbar(IEnumerable<IdentityError> errors)
    {
        foreach (var error in errors)
        {
            switch (error.Code)
            {
                case "DuplicateEmail":
                case "DuplicateUserName":
                    Snackbar.Add("E-post adressen finns redan registrerad.", Severity.Error);
                    break;
                case "InvalidUserName":
                case "InvalidEmail":
                    Snackbar.Add("De där är inte en e-post adress.", Severity.Error);
                    break;
                case "PasswordTooShort":
                    Snackbar.Add("Lösenordet är för kort.", Severity.Error);
                    break;
                case "PasswordRequiresNonAlphanumeric":
                    Snackbar.Add("Lösenordet måste innehålla specialtecken.", Severity.Error);
                    break;
                case "PasswordRequiresDigit":
                    Snackbar.Add("Lösenordet måste innehålla minst en siffra.", Severity.Error);
                    break;
                case "PasswordRequiresLower":
                    Snackbar.Add("Lösenordet måste innehålla minst en gemen.", Severity.Error);
                    break;
                case "PasswordRequiresUpper":
                    Snackbar.Add("Lösenordet måste innehålla minst en versal.", Severity.Error);
                    break;
                default:
                    Snackbar.Add($"{error.Code}: {error.Description}", Severity.Error);
                    break;
            }
        }
    }
}
